(function() {
    var type_impls = Object.fromEntries([["hermit_sync",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#428\">Source</a><a href=\"#impl-Debug-for-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#429\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Lazy%3CR,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#560\">Source</a><a href=\"#impl-Default-for-Lazy%3CR,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#562\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new lazy value using <code>Default</code> as the initializing function.</p>\n</div></details></div></details>","Default","hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#546\">Source</a><a href=\"#impl-Deref-for-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#547\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#548\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#553\">Source</a><a href=\"#impl-DerefMut-for-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#554\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#446\">Source</a><a href=\"#impl-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#449\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"generic_once_cell/struct.Lazy.html#tymethod.new\" class=\"fn\">new</a>(f: F) -&gt; <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new lazy value with the given initializing\nfunction.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#459\">Source</a><h4 class=\"code-header\">pub fn <a href=\"generic_once_cell/struct.Lazy.html#tymethod.into_value\" class=\"fn\">into_value</a>(this: <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes this <code>Lazy</code> returning the stored value.</p>\n<p>Returns <code>Ok(value)</code> if <code>Lazy</code> is initialized and <code>Err(f)</code> otherwise.</p>\n</div></details></div></details>",0,"hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#469\">Source</a><a href=\"#impl-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.force\" class=\"method\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#484\">Source</a><h4 class=\"code-header\">pub fn <a href=\"generic_once_cell/struct.Lazy.html#tymethod.force\" class=\"fn\">force</a>(this: &amp;<a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the <code>Deref</code> impl, but is explicit.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>generic_once_cell::Lazy;\n\n<span class=\"kw\">let </span>lazy = Lazy::&lt;RawMutex, <span class=\"kw\">_</span>&gt;::new(|| <span class=\"number\">92</span>);\n\n<span class=\"macro\">assert_eq!</span>(Lazy::force(<span class=\"kw-2\">&amp;</span>lazy), <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>lazy, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#504\">Source</a><h4 class=\"code-header\">pub fn <a href=\"generic_once_cell/struct.Lazy.html#tymethod.force_mut\" class=\"fn\">force_mut</a>(this: &amp;mut <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Forces the evaluation of this lazy value and\nreturns a mutable reference to the result. This is equivalent\nto the <code>Deref</code> impl, but is explicit.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>generic_once_cell::Lazy;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lazy = Lazy::&lt;RawMutex, <span class=\"kw\">_</span>&gt;::new(|| <span class=\"number\">92</span>);\n\n<span class=\"macro\">assert_eq!</span>(Lazy::force_mut(<span class=\"kw-2\">&amp;mut </span>lazy), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">92</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#523\">Source</a><h4 class=\"code-header\">pub fn <a href=\"generic_once_cell/struct.Lazy.html#tymethod.get\" class=\"fn\">get</a>(this: &amp;<a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns <code>None</code>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>generic_once_cell::Lazy;\n\n<span class=\"kw\">let </span>lazy = Lazy::&lt;RawMutex, <span class=\"kw\">_</span>&gt;::new(|| <span class=\"number\">92</span>);\n\n<span class=\"macro\">assert_eq!</span>(Lazy::get(<span class=\"kw-2\">&amp;</span>lazy), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>lazy, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(Lazy::get(<span class=\"kw-2\">&amp;</span>lazy), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#541\">Source</a><h4 class=\"code-header\">pub fn <a href=\"generic_once_cell/struct.Lazy.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(this: &amp;mut <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns <code>None</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>generic_once_cell::Lazy;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lazy = Lazy::&lt;RawMutex, <span class=\"kw\">_</span>&gt;::new(|| <span class=\"number\">92</span>);\n\n<span class=\"macro\">assert_eq!</span>(Lazy::get_mut(<span class=\"kw-2\">&amp;mut </span>lazy), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>lazy, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(Lazy::get_mut(<span class=\"kw-2\">&amp;mut </span>lazy), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">92</span>));</code></pre></div></div></details></div></details>",0,"hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<section id=\"impl-RefUnwindSafe-for-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#444\">Source</a><a href=\"#impl-RefUnwindSafe-for-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a>,\n    <a class=\"struct\" href=\"generic_once_cell/struct.OnceCell.html\" title=\"struct generic_once_cell::OnceCell\">OnceCell</a>&lt;R, T&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section>","RefUnwindSafe","hermit_sync::Lazy","hermit_sync::InterruptLazy"],["<section id=\"impl-Sync-for-Lazy%3CR,+T,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/generic_once_cell/lib.rs.html#441\">Source</a><a href=\"#impl-Sync-for-Lazy%3CR,+T,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"generic_once_cell/struct.Lazy.html\" title=\"struct generic_once_cell::Lazy\">Lazy</a>&lt;R, T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    <a class=\"struct\" href=\"generic_once_cell/struct.OnceCell.html\" title=\"struct generic_once_cell::OnceCell\">OnceCell</a>&lt;R, T&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","hermit_sync::Lazy","hermit_sync::InterruptLazy"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[19481]}